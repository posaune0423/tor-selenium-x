---
description: 
globs: 
alwaysApply: true
---
# Project Setup Rules

## UV Package Management

### Initialize Project
```bash
# Create new project
uv init --python 3.12 project-name
cd project-name

# Add dependencies
uv add requests httpx pandas

# Add development dependencies
uv add --dev pytest black isort mypy ruff pytest-cov

# Add optional dependencies
uv add --optional selenium "selenium[dev]"
```

### Virtual Environment Management
```bash
# Create virtual environment
uv venv

# Activate virtual environment
source .venv/bin/activate  # Unix/macOS
# or
.venv\Scripts\activate     # Windows

# Run scripts with uv (no activation needed)
uv run python script.py
uv run pytest
```

### Lock File Management
```bash
# Generate lock file
uv lock

# Install from lock file
uv sync

# Update dependencies
uv lock --upgrade
```

## pyproject.toml Configuration

### Basic Configuration
```toml
[project]
name = "project-name"
version = "0.1.0"
description = "Project description"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["keyword1", "keyword2"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "requests>=2.31.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.290",
    "pytest-cov>=4.1.0",
]
selenium = [
    "selenium>=4.15.0",
    "webdriver-manager>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/username/project-name"
Repository = "https://github.com/username/project-name"
Documentation = "https://project-name.readthedocs.io"
"Bug Tracker" = "https://github.com/username/project-name/issues"

[project.scripts]
project-cli = "project_name.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
```

### Tool Configuration
```toml
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["project_name"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
```

## Development Workflow

### Pre-commit Setup
```bash
# Install pre-commit
uv add --dev pre-commit

# Create .pre-commit-config.yaml
# Initialize pre-commit
uv run pre-commit install
uv run pre-commit run --all-files
```

### Make Commands
Create a `Makefile` for common tasks:
```makefile
.PHONY: install dev test lint format check clean

install:
	uv sync

dev:
	uv sync --extra dev

test:
	uv run pytest

lint:
	uv run ruff check .
	uv run mypy .

format:
	uv run black .
	uv run isort .

check: lint test

clean:
	rm -rf .pytest_cache
	rm -rf htmlcov
	rm -rf .coverage
	rm -rf dist
	rm -rf build
	rm -rf *.egg-info
```

### GitHub Actions CI
```yaml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Lint with ruff
      run: uv run ruff check .
    
    - name: Type check with mypy
      run: uv run mypy .
    
    - name: Test with pytest
      run: uv run pytest --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
``` 