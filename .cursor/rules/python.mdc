---
description: 
globs: *.py
alwaysApply: false
---
# Python Development Rules

## Code Style & Formatting

- Use Python 3.12+ features and type hints consistently
- Follow PEP 8 style guidelines
- Use `black` for code formatting with line length of 88
- Use `isort` for import sorting
- Add docstrings to all public functions, classes, and modules using Google style
- Use meaningful variable names and avoid abbreviations

## Type Hints

- Always use type hints for function parameters and return values
- Use modern typing features (e.g., `list[str]` instead of `List[str]`)
- Use `typing.Protocol` for structural typing when appropriate
- Import types from `typing` module when needed for Python < 3.9 compatibility

## Error Handling

- Use specific exception types instead of generic `Exception`
- Implement proper error handling with try/except blocks
- Use `logging` module instead of print statements for debugging
- Consider using `Result` types for better error handling patterns

## Project Structure

```
project/
├── src/
│   └── project_name/
│       ├── __init__.py
│       ├── main.py
│       └── modules/
├── tests/
│   ├── __init__.py
│   └── test_*.py
├── docs/
├── pyproject.toml
├── README.md
└── .gitignore
```

## Dependencies

- Use `uv` for dependency management and virtual environments
- Pin dependency versions in `pyproject.toml`
- Separate development dependencies from runtime dependencies
- Use optional dependencies for extra features

## Testing

- Write tests using `pytest`
- Aim for >80% test coverage
- Use `pytest-cov` for coverage reporting
- Follow AAA pattern (Arrange, Act, Assert) in tests
- Use fixtures for test setup and teardown

## Performance

- Use `asyncio` for I/O bound operations
- Consider using `concurrent.futures` for CPU-bound parallel tasks
- Profile code with `cProfile` when performance is critical
- Use generators and iterators for memory efficiency

## Security

- Validate all user inputs
- Use `secrets` module for cryptographic operations
- Never commit sensitive data (API keys, passwords) to version control
- Use environment variables for configuration

## Logging

```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
```

## Common Patterns

### Context Managers
```python
from contextlib import contextmanager
from typing import Generator

@contextmanager
def managed_resource() -> Generator[Resource, None, None]:
    resource = acquire_resource()
    try:
        yield resource
    finally:
        release_resource(resource)
```

### Data Classes
```python
from dataclasses import dataclass
from typing import Optional

@dataclass
class User:
    name: str
    email: str
    age: Optional[int] = None
```

### Async/Await
```python
import asyncio
from typing import List

async def fetch_data(url: str) -> dict:
    # async implementation
    pass

async def main() -> None:
    tasks = [fetch_data(url) for url in urls]
    results = await asyncio.gather(*tasks)
``` 