[project]
name = "tor-selenium-x"
version = "0.1.0"
description = "Modern Python project with Tor and Selenium integration"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]
keywords = ["python", "tor", "selenium", "automation"]
classifiers = [
 "Development Status :: 3 - Alpha",
 "Intended Audience :: Developers",
 "License :: OSI Approved :: MIT License",
 "Programming Language :: Python :: 3.12",
 "Programming Language :: Python :: 3.13",
 "Topic :: Software Development :: Libraries :: Python Modules",
 "Topic :: Internet :: WWW/HTTP :: Browsers",
]

dependencies = [
 "loguru>=0.7.0",
 "tbselenium>=0.7.0",
 "selenium>=4.15.0",
 "stem>=1.8.0",
 "requests>=2.31.0",
 "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dev = [
 "pytest>=7.4.0",
 "pytest-cov>=4.1.0",
 "pytest-asyncio>=0.21.0",
 "ruff>=0.6.0",
 "pyvirtualdisplay>=3.0",
]
selenium = ["selenium>=4.15.0", "webdriver-manager>=4.0.0"]
all = ["tor-selenium-x[dev,selenium]"]

[project.urls]
Homepage = "https://github.com/posaune0423/tor-selenium-x"
Repository = "https://github.com/posaune0423/tor-selenium-x"
"Bug Tracker" = "https://github.com/posaune0423/tor-selenium-x/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]
include = ["src/**/*.py"]


[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4
src = ["src", "tests"]

[tool.ruff.lint]
select = [
 "E",   # pycodestyle errors
 "W",   # pycodestyle warnings
 "F",   # pyflakes
 "I",   # isort
 "B",   # flake8-bugbear
 "C4",  # flake8-comprehensions
 "UP",  # pyupgrade
 "N",   # pep8-naming
 "SIM", # flake8-simplify
 "RUF", # Ruff-specific rules
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html:data/coverage"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
 "integration: marks tests as integration tests",
 "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]
data_file = "data/.coverage"

[tool.coverage.report]
exclude_lines = [
 "pragma: no cover",
 "def __repr__",
 "if __name__ == .__main__.:",
 "raise NotImplementedError",
]
show_missing = true

[tool.coverage.html]
directory = "data/coverage"
